# Generated by Django 2.2.5 on 2019-10-04 09:00

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('appliances', '0054_openshift_project_made_bigger'),
    ]

    operations = [
        migrations.AlterField(
            model_name='appliance',
            name='appliance_pool',
            field=models.ForeignKey(help_text='Which appliance pool this appliance belongs to.',
                                    null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='appliances.AppliancePool'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='datetime_leased',
            field=models.DateTimeField(help_text='When the appliance was leased', null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='ip_address',
            field=models.CharField(help_text="Appliance's IP address", max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='leased_until',
            field=models.DateTimeField(help_text='When does the appliance lease expire', null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='lun_disk_connected',
            field=models.BooleanField(default=False, help_text=('Whether the Direct LUN '
                                                                'disk is connected. (RHEV Only)')),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='marked_for_deletion',
            field=models.BooleanField(default=False,
                                      help_text='Appliance is already being deleted.'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='name',
            field=models.CharField(help_text="Appliance's name as it is in the provider.",
                                   max_length=64),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='openshift_ext_ip',
            field=models.CharField(help_text="Openshift's project external ip", max_length=64,
                                   null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='openshift_project',
            field=models.CharField(help_text="Openshift's project name", max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='power_state',
            field=models.CharField(default='unknown', help_text="Appliance's power state",
                                   max_length=32),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='ready',
            field=models.BooleanField(default=False, help_text=('Appliance has an IP address '
                                                                'and web UI is online.')),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='ssh_failed',
            field=models.BooleanField(default=False, help_text='If last swap check failed on SSH.'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='status',
            field=models.TextField(default='Appliance inserted into the system.'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='swap',
            field=models.IntegerField(blank=True, help_text='How many MB is the appliance in swap.',
                                      null=True),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='template',
            field=models.ForeignKey(help_text="Appliance's source template.",
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='appliances.Template'),
        ),
        migrations.AlterField(
            model_name='appliance',
            name='uuid',
            field=models.CharField(blank=True, help_text='UUID of the machine', max_length=36,
                                   null=True),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='date',
            field=models.DateField(help_text='Appliance date.', null=True),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='finished',
            field=models.BooleanField(default=False, help_text='Whether fulfillment has been met.'),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='group',
            field=models.ForeignKey(help_text='Group which is used to provision appliances.',
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='appliances.Group'),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='not_needed_anymore',
            field=models.BooleanField(default=False, help_text=('Used for marking the appliance '
                                                                'pool as being deleted')),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='owner',
            field=models.ForeignKey(help_text='User who owns the appliance pool',
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='preconfigured',
            field=models.BooleanField(default=True, help_text=('Whether to provision '
                                                               'preconfigured appliances')),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='provider',
            field=models.ForeignKey(blank=True, help_text=('If requested, '
                                                           'appliances can be on single provider.'),
                                    null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='appliances.Provider'),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='template_type',
            field=models.CharField(choices=[('virtual_machine', 'Virtual Machine'),
                                            ('docker_vm', 'VM-based Docker container'),
                                            ('openshift_pod', 'Openshift pod')],
                                   default='virtual_machine', max_length=24),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='total_count',
            field=models.IntegerField(help_text='How many appliances should be in this pool.'),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='version',
            field=models.CharField(help_text='Appliance version', max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='appliancepool',
            name='yum_update',
            field=models.BooleanField(default=False, help_text='Whether to update appliances.'),
        ),
        migrations.AlterField(
            model_name='delayedprovisiontask',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='group',
            name='id',
            field=models.CharField(help_text=('Group name as trackerbot says. '
                                              '(eg. upstream, downstream-53z, ...)'),
                                   max_length=32, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='group',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='group',
            name='template_obsolete_days',
            field=models.IntegerField(blank=True, help_text=("Templates older than X "
                                                             "days won't be loaded into sprout"),
                                      null=True),
        ),
        migrations.AlterField(
            model_name='group',
            name='template_obsolete_days_delete',
            field=models.BooleanField(default=False,
                                      help_text=('If template_obsolete_days set, this will enable '
                                                 'deletion of obsolete templates using that metric.'
                                                 ' WARNING! Use with care. Best use for upstream '
                                                 'templates.')),
        ),
        migrations.AlterField(
            model_name='group',
            name='templates_url',
            field=models.TextField(blank=True, help_text=('Location of templates. '
                                                          'Currently used for containers.'),
                                   null=True),
        ),
        migrations.AlterField(
            model_name='groupshepherd',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='groupshepherd',
            name='template_pool_size',
            field=models.IntegerField(default=0, help_text=('How many appliances to '
                                                            'keep spinned for quick taking.')),
        ),
        migrations.AlterField(
            model_name='groupshepherd',
            name='unconfigured_template_pool_size',
            field=models.IntegerField(default=0, help_text=('How many appliances to keep '
                                                            'spinned for quick taking - '
                                                            'unconfigured ones.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='allow_renaming',
            field=models.BooleanField(default=False, help_text=('Whether this provider '
                                                                'can rename appliances.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='appliance_limit',
            field=models.IntegerField(help_text=('Hard limit of how many appliances can '
                                                 'run on this provider'), null=True),
        ),
        migrations.AlterField(
            model_name='provider',
            name='container_base_template',
            field=models.CharField(blank=True, help_text=('Base tempalte for containerized '
                                                          'ManageIQ deployment.'),
                                   max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='provider',
            name='disabled',
            field=models.BooleanField(default=False, help_text=('We can disable providers '
                                                                'if we want.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='hidden',
            field=models.BooleanField(default=False, help_text=('We can hide providers '
                                                                'if that is required.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='id',
            field=models.CharField(help_text="Provider's key in YAML.", max_length=32,
                                   primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='provider',
            name='num_simultaneous_configuring',
            field=models.IntegerField(default=1, help_text=('How many simultaneous template '
                                                            'configuring tasks can run on this '
                                                            'provider.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='num_simultaneous_provisioning',
            field=models.IntegerField(default=5,
                                      help_text=('How many simultaneous background '
                                                 'provisioning tasks can run on this provider.')),
        ),
        migrations.AlterField(
            model_name='provider',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='provider',
            name='user_groups',
            field=models.ManyToManyField(blank=True, help_text=('We can specify the providers '
                                                                'that are tied to a specific user '
                                                                'group.'), to='auth.Group'),
        ),
        migrations.AlterField(
            model_name='provider',
            name='working',
            field=models.BooleanField(default=False, help_text='Whether provider is available.'),
        ),
        migrations.AlterField(
            model_name='template',
            name='container',
            field=models.CharField(blank=True, help_text=('Whether the appliance is located in '
                                                          'a container in the VM. This then '
                                                          'specifies the container name.'),
                                   max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='template',
            name='custom_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default='{}',
                                                                 help_text=('Some Templates require'
                                                                            ' additional data for '
                                                                            'deployment')),
        ),
        migrations.AlterField(
            model_name='template',
            name='date',
            field=models.DateField(help_text='Template build date (original).'),
        ),
        migrations.AlterField(
            model_name='template',
            name='exists',
            field=models.BooleanField(default=True, help_text='Template exists in the provider.'),
        ),
        migrations.AlterField(
            model_name='template',
            name='name',
            field=models.CharField(help_text="Template's name as it resides on provider.",
                                   max_length=64),
        ),
        migrations.AlterField(
            model_name='template',
            name='object_meta_data',
            field=models.TextField(default='{}\n'),
        ),
        migrations.AlterField(
            model_name='template',
            name='original_name',
            field=models.CharField(help_text="Template's original name.", max_length=64),
        ),
        migrations.AlterField(
            model_name='template',
            name='parent_template',
            field=models.ForeignKey(blank=True, help_text='What was source of this template?',
                                    null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='child_templates', to='appliances.Template'),
        ),
        migrations.AlterField(
            model_name='template',
            name='preconfigured',
            field=models.BooleanField(default=True, help_text='Is prepared for immediate use?'),
        ),
        migrations.AlterField(
            model_name='template',
            name='provider',
            field=models.ForeignKey(help_text='Where does this template reside',
                                    on_delete=django.db.models.deletion.CASCADE,
                                    related_name='provider_templates', to='appliances.Provider'),
        ),
        migrations.AlterField(
            model_name='template',
            name='ready',
            field=models.BooleanField(default=False, help_text='Template is ready-to-be-used'),
        ),
        migrations.AlterField(
            model_name='template',
            name='status',
            field=models.TextField(default='Template inserted into the system'),
        ),
        migrations.AlterField(
            model_name='template',
            name='suggested_delete',
            field=models.BooleanField(default=False,
                                      help_text='Whether Sprout suggests deleting this template.'),
        ),
        migrations.AlterField(
            model_name='template',
            name='template_group',
            field=models.ForeignKey(help_text='Which group the template belongs to.',
                                    on_delete=django.db.models.deletion.CASCADE,
                                    to='appliances.Group'),
        ),
        migrations.AlterField(
            model_name='template',
            name='template_type',
            field=models.CharField(choices=[('virtual_machine', 'Virtual Machine'),
                                            ('docker_vm', 'VM-based Docker container'),
                                            ('openshift_pod', 'Openshift pod')],
                                   default='virtual_machine', max_length=24),
        ),
        migrations.AlterField(
            model_name='template',
            name='usable',
            field=models.BooleanField(default=False, help_text='Template is marked as usable'),
        ),
        migrations.AlterField(
            model_name='template',
            name='version',
            field=models.CharField(help_text='Downstream version.', max_length=32, null=True),
        ),
    ]
