<?xml version="1.0" encoding="UTF-8"?>
<MiqAeDatastore version="1.0">
  <MiqAeClass name="Service" namespace="RefArch" description="Service" display_name="Service">
    <MiqAeMethod name="scalewebsrv" language="ruby" scope="instance" location="inline" display_name="scalewebsrv"><![CDATA[# 
#            Automate Method 
# 
$evm.log("info", "scalewebsrv Automate Method Started") 
@method = 'buildrequest' 
@log_prefix = "[#{@method}]" 
@debug = true 
# 
#            Method Code Goes here 
# 

def build_request(solution_hash) 

output = '' 

prov = $evm.root["service_template_provision_task"] 

#Set some things 
  # Get the current logged in user 
  user = $evm.root['user'] 
  #$evm.log("info","#{@method} - Inspecting User object:<#{user.inspect}>") if @debug 

  if user.nil? 
    userid = 'admin' 
    user_mail = 'aweiteka@redhat.com' 
    # Should get rid of these 2 below in the dialog 
    #user_first = 'Admin' 
    #user_last = 'Administrator' 
  else 
    userid = user.userid 
    user_mail = user.email 

    # If currently logged in user email is nil assign a default email address 
    user_mail ||= 'aweiteka@redhat.com' 
    user_first = "Aaron" 
    user_last = "Weitekamp" 
  end 

$evm.log("info","Output of Root Object") 
$evm.root.attributes.sort.each { |k, v| $evm.log("info", "\t#{k}: #{v}")} 

scalewebsrv = true 
  
if scalewebsrv == true 
    $evm.log("info","scalewebsrv is a go") 
    # arg0 = version 
    args = ['1.1'] 
    # arg1 = templateFields 
    args << "name=#{solution_hash[:template_name]}|request_type=template" 
    # arg2 = vmFields 
    args << "number_of_cpus=#{solution_hash[:vcpu]}|vm_memory=#{solution_hash[:vm_memory]}|number_of_vms=#{solution_hash[:vms]}|vlan=#{solution_hash[:vlan]}|catalog_id=#{solution_hash[:catalog_id]}|vm_prefix=#{solution_hash[:vm_prefix]}|provision_type=#{solution_hash[:provision_type]}|pxe_server_id=#{solution_hash[:pxe_server_id]}|pxe_image_id=#{solution_hash[:pxe_image_id]}|customization_template_id=#{solution_hash[:customization_template_id]}" 
    # arg3 = requester 
    args << nil 
    # arg4 = tags 
    args << "Environment: CloudForms" 
    # arg5 = additionalValues 
    args << "user_name=#{userid}|owner_email=#{user_mail}|user_first=#{user_first}|user_last=#{user_last}" 
    # arg6 = emsCustomAttributes 
    args << solution_hash.collect { |k, v| "#{k}=#{v}" }.join('|') 
    # arg7 = miqCustomAttributes 
    args << nil 
    $evm.log("info", "Inline Method: <#{@log_prefix}> - Building provisioning request with the following arguments: <#{args.inspect}>") 
    # exit MIQ_ABORT 
    $evm.execute('create_provision_request', *args) 
else 
	$evm.log("info","scalewebsrv is foo bar, not scaling") 
end 

end 

def parse_piped_string(text_input, options={}) 
  return {} unless text_input.kind_of?(String) 
  result = {} 
  text_input.split('|').each do |value| 

    next if value.blank? 
    idx = value.index('=') 
    next if idx.nil? 
    key = !options[:modify_key_name] ? value[0, idx].strip : value[0, idx].strip.to_sym 
    result[key] = value[idx+1..-1].strip 
  end 
  return result 
end 

## Get variables 
solution_id = $evm.root['dialog_solution_id'].to_i 
$evm.root['solution_id'] = solution_id 
$evm.log("info", "Inline Method: <#{@log_prefix}> - Solution_ID : #{solution_id}") if @debug 

 
  solution_hash= { 
      :template_name => "websrv", 
      :vcpu => "1", 
      :vm_memory => "2048", 
      :vms => "1", 
      :owner_first_name => "aaron", 
      :owner_last_name => "weitekamp", 
      :owner_email => "aweiteka@redhat.com", 
      :vm_prefix => "websrv", 
      :vlan => "rhevm", 
      :provision_type => "pxe", 
      :pxe_server_id => "2", 
      :pxe_image_id => "2", 
      #:cust_temp => "websrv", 
      :customization_template_id => "7", 
      "PrimaryFirstname" => "Aaron", 
      "PrimaryLastName" => "Weitekamp", 
      "PrimaryEmail" => "aweiteka@redhat.com" 
  } 
  $evm.log("info", "Building request") if @debug 

  build_request(solution_hash) 

$evm.log("info", "<Inline Method: <#{@log_prefix}> - EVM Service Task Finished")  if @debug 

# 
# 
# 
$evm.log("info", "scalewebsrv Automate Method Ended") 
exit MIQ_OK]]>    </MiqAeMethod>
    <MiqAeSchema>
      <MiqAeField name="execute" substitute="true" aetype="method" datatype="string" priority="1" message="create">
scalewebsrv      </MiqAeField>
    </MiqAeSchema>
    <MiqAeInstance name="scalewebsrv" display_name="scalewebsrv" description="Automate VM creation">
    </MiqAeInstance>
  </MiqAeClass>
</MiqAeDatastore>
