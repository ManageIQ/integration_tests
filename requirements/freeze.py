#!/usr/bin/env python
"""
outputs the frozen packages
"""
from __future__ import print_function
import sys
import argparse
import subprocess
import tempfile
import shutil
from contextlib import contextmanager

from cfme.scripting import quickstart
import os

os.environ.pop('PYTHONPATH', '')

parser = argparse.ArgumentParser(description=__doc__.strip())
parser.add_argument('--venv', default=None)
parser.add_argument('--keep-venv', action='store_true')
parser.add_argument(
    "--template", default="requirements/template.txt",)
parser.add_argument(
    "--out", default=None,
    help='the file where packages should be written to')


def freeze(venv, out):
    """
    this one a frozen requirement file from a virtualenv
    for sanity it adds a comment about the freeze_all script
    """
    print("""\
# this requirement file is autogenerated, please run requirements/freeze_all.py to upgrade correctly

""", file=out)
    out.flush()  # no print(flush) for py2 support
    quickstart.venv_call(venv,
        'pip', 'freeze',
        stdout=out,
        call=subprocess.check_call)


@contextmanager
def maybe_transient_venv_dir(path, keep):
    """
    this one does optional cleanup if it needs to make a tmpdir
    """
    if path is None:
        tmp_path = tempfile.mkdtemp(suffix='-miq-QE-rebuild-venv')
        try:
            yield tmp_path
        finally:
            if not keep:
                shutil.rmtree(tmp_path)
    else:
        yield path


def main(args):
    with maybe_transient_venv_dir(args.venv, args.keep_venv) as venv:
        quickstart.setup_virtualenv(venv, use_site=False)
        quickstart.venv_call(venv, 'pip', 'install', '-r', args.template)
        if args.out is None:
            freeze(venv, sys.stdout)
        else:
            with open(args.out, 'w') as out:
                freeze(venv, out)


if __name__ == '__main__':
    main(parser.parse_args())
