#!/usr/bin/env python
"""
outputs the frozen packages
"""
from __future__ import print_function

import argparse
import os
import shutil
import subprocess
import sys
import tempfile
from contextlib import contextmanager

from cfme.scripting import quickstart

os.environ.pop("PYTHONPATH", "")

parser = argparse.ArgumentParser(description=__doc__.strip())
parser.add_argument("--venv", default=None)
parser.add_argument("--keep-venv", action="store_true")
parser.add_argument("--template", default="requirements/template.txt")
parser.add_argument("--out", default=None, help="the file where packages should be written to")
parser.add_argument(
    "--upgrade-only", default=None, help="updates only the given package instead of all of them"
)


def freeze(venv, out):
    """
    this one a frozen requirement file from a virtualenv
    for sanity it adds a comment about the freeze_all script
    """
    print(
        """\
# this requirement file is autogenerated, please run requirements/freeze_all.py to upgrade correctly
# currently requirements/freeze_all.py needs to be executed for both python2 and python3 !
# to upgrade a single package use requirements/freeze_all.py --upgrade-only apackage

""",
        file=out,
    )
    out.flush()  # no print(flush) for py2 support
    quickstart.venv_call(venv, "pip", "freeze", stdout=out, call=subprocess.check_call)


@contextmanager
def maybe_transient_venv_dir(path, keep):
    """
    this one does optional cleanup if it needs to make a tmpdir
    """
    if path is None:
        tmp_path = tempfile.mkdtemp(suffix="-miq-QE-rebuild-venv")
        try:
            yield tmp_path
        finally:
            if not keep:
                shutil.rmtree(tmp_path)
    else:
        yield path


def main(args):
    with maybe_transient_venv_dir(args.venv, args.keep) as venv:
        quickstart.setup_virtualenv(venv, use_site=False)
        if args.upgrade_only is None:
            quickstart.venv_call(venv, "pip", "install", "-r", args.template)
        elif args.out and args.upgrade_only:
            quickstart.venv_call(venv, "pip", "install", "-r", args.template, "-c", args.out)
            quickstart.venv_call(venv, "pip", "install", "-U", args.upgrade_only)
        else:
            raise ValueError("can't use stdout as constraint")
        if args.out is None:
            freeze(venv, sys.stdout)
        else:
            with open(args.out, "w") as out:
                freeze(venv, out)


if __name__ == "__main__":
    main(parser.parse_args())
